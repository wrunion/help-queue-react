{"version":3,"sources":["components/Header.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketControl.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","id","NewTicketForm","props","Fragment","Segment","Form","onSubmit","event","preventDefault","onNewTicketCreation","names","target","value","location","issue","v4","Field","name","placeholder","Button","fluid","color","type","Ticket","className","TicketList","ticketList","map","ticket","index","key","TicketControl","handleClick","setState","prevState","formVisibleOnPage","handleAddingNewTicket","newTicket","newMasterTicketList","state","masterTicketList","concat","bind","currentlyVisibleState","buttonText","this","content","onClick","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAQeA,MANf,WACE,OACE,wBAAIC,GAAG,eAAP,e,gFCwCWC,MAvCf,SAAuBC,GAYrB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAML,GAAG,kBAAkBM,SAbjC,SAAgCC,GAC9BA,EAAMC,iBACNN,EAAMO,oBAAoB,CACxBC,MAAOH,EAAMI,OAAOD,MAAME,MAC1BC,SAAUN,EAAMI,OAAOE,SAASD,MAChCE,MAAOP,EAAMI,OAAOG,MAAMF,MAC1BZ,GAAIe,mBAQA,kBAACV,EAAA,EAAKW,MAAN,KACE,wCACA,2BAAOC,KAAK,QAAQC,YAAY,gBAElC,kBAACb,EAAA,EAAKW,MAAN,KACE,2CACA,2BAAOC,KAAK,WAAWC,YAAY,cAErC,kBAACb,EAAA,EAAKW,MAAN,KACE,uDACA,8BAAUC,KAAK,QAAQC,YAAY,yBAErC,kBAACC,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,OAAOC,KAAK,UAAhC,aCdKC,MAff,SAAgBrB,GACd,OACE,kBAACE,EAAA,EAAD,KACE,wBAAIoB,UAAU,iBAAiBtB,EAAMQ,MAArC,MAA+CR,EAAMW,UACrD,2BAAG,4BAAKX,EAAMY,UCgCLW,MAlBf,SAAoBvB,GAClB,OACE,kBAAC,IAAMC,SAAP,KACE,6BACCD,EAAMwB,WAAWC,KAAI,SAACC,EAAQC,GAAT,OACpB,kBAAC,EAAD,CAAQnB,MAASkB,EAAOlB,MACtBG,SAAYe,EAAOf,SACnBC,MAASc,EAAOd,MAChBgB,IAAOD,SCkBFE,E,kDAzCb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IAQR8B,YAAc,WACZ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,mBAAoBD,EAAUC,uBAXf,EAcnBC,sBAAwB,SAACC,GACvB,IAAMC,EAAsB,EAAKC,MAAMC,iBAAiBC,OAAOJ,GAC/D,EAAKJ,SAAS,CAACO,iBAAkBF,EACnBH,mBAAmB,KAfjC,EAAKI,MAAQ,CACXJ,mBAAmB,EACnBK,iBAAkB,IAEpB,EAAKR,YAAc,EAAKA,YAAYU,KAAjB,gBANF,E,qDAqBjB,IAAIC,EAAwB,KACxBC,EAAa,KASjB,OARIC,KAAKN,MAAMJ,mBACbQ,EAAwB,kBAAC,EAAD,CAAelC,oBAAqBoC,KAAKT,wBACjEQ,EAAa,0BAEbD,EAAwB,kBAAC,EAAD,CAAYjB,WAAYmB,KAAKN,MAAMC,mBAC3DI,EAAa,cAIb,kBAAC,IAAMzC,SAAP,KACGwC,EACD,kBAACxB,EAAA,EAAD,CAAQ2B,QAASF,EAAYG,QAASF,KAAKb,mB,GApCvBgB,IAAMC,WCUnBC,MAXf,WACE,OACE,kBAAC,IAAM/C,SAAP,KACE,yBAAKqB,UAAU,eAAexB,GAAG,eAC/B,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGYmD,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASC,MACvB,2D,cCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.288e5033.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <h1 id=\"header-main\">Help Queue</h1>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { Form, Button, Segment } from 'semantic-ui-react';\nimport { v4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nfunction NewTicketForm(props) {\n\n  function handleTicketSubmission(event) {\n    event.preventDefault();\n    props.onNewTicketCreation({\n      names: event.target.names.value, \n      location: event.target.location.value,\n      issue: event.target.issue.value,\n      id: v4()\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <Segment>\n        <Form id=\"new-ticket-form\" onSubmit={handleTicketSubmission} >\n          <Form.Field>\n            <label>Names</label>\n            <input name='names' placeholder='Pair Names' />\n          </Form.Field>\n          <Form.Field>\n            <label>Location</label>\n            <input name='location' placeholder='Location' />\n          </Form.Field>\n          <Form.Field>\n            <label>Describe your issue:</label>\n            <textarea name='issue' placeholder='Describe your issue' />\n          </Form.Field>\n          <Button fluid color=\"teal\" type='submit'>Help!</Button>  \n        </Form>\n      </Segment>\n    </React.Fragment>\n  );\n}\n\nNewTicketForm.propTypes = {\n  onNewTicketCreation: PropTypes.func\n};\n\nexport default NewTicketForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment } from 'semantic-ui-react';\n\nfunction Ticket(props){\n  return (\n    <Segment>\n      <h3 className=\"ticket-header\">{props.names} - {props.location}</h3>\n      <p><em>{props.issue}</em></p>\n    </Segment>\n  );\n}\n\nTicket.propTypes = {\n  names: PropTypes.string,\n  location: PropTypes.string,\n  issue: PropTypes.string\n}\n\nexport default Ticket;","import React from 'react';\nimport Ticket from './Ticket';\nimport PropTypes from 'prop-types';\n\n// const masterTicketList = [\n//   {\n//     names: 'Javier and Haley',\n//     location: '3A',\n//     issue: `Firebase won't save record!`\n//   },\n//   {\n//     names: 'Alex and Danielle',\n//     location: '4B',\n//     issue: `Prop types are throwing an error.`\n//   },\n//   {\n//     names: 'Imani & Jacob',\n//     location: '9F',\n//     issue: `Child component isn't rendering.`\n//   }\n// ];\n\nfunction TicketList(props) {\n  return (\n    <React.Fragment>\n      <hr />\n      {props.ticketList.map((ticket, index) => \n        <Ticket names = {ticket.names}\n          location = {ticket.location}\n          issue = {ticket.issue}\n          key = {index} />\n      )}\n    </React.Fragment>\n  );\n}\n\nTicketList.propTypes = {\n  ticketList: PropTypes.array\n};\n\nexport default TicketList;","import React from 'react';\nimport NewTicketForm from './NewTicketForm';\nimport TicketList from './TicketList';\nimport { Button } from 'semantic-ui-react';\n\nclass TicketControl extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      formVisibleOnPage: false,\n      masterTicketList: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      formVisibleOnPage: !prevState.formVisibleOnPage}));\n  }\n\n  handleAddingNewTicket = (newTicket) => {\n    const newMasterTicketList = this.state.masterTicketList.concat(newTicket);\n    this.setState({masterTicketList: newMasterTicketList, \n                  formVisibleOnPage: false });\n  }\n\n  render() {\n    let currentlyVisibleState = null;\n    let buttonText = null;\n    if (this.state.formVisibleOnPage) {\n      currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicket} />\n      buttonText = \"Return to ticket list\";\n    } else {\n      currentlyVisibleState = <TicketList ticketList={this.state.masterTicketList} />\n      buttonText = \"Add Ticket\"\n    }\n\n    return (\n      <React.Fragment>\n        {currentlyVisibleState}\n        <Button content={buttonText} onClick={this.handleClick} />\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default TicketControl;","import React from 'react';\nimport Header from './Header';\nimport TicketControl from './TicketControl';\n\nfunction App(){\n  return (\n    <React.Fragment>\n      <div className=\"ui container\" id=\"content-all\">\n        <Header />\n        <TicketControl />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}